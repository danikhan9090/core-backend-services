openapi: 3.0.0
info:
  title: Task Management Service API
  version: 1.0.0
  description: API documentation for the Task Management service

servers:
  - url: http://localhost:3001
    description: Local development server

paths:
  /tasks:
    post:
      summary: Create a new task
      tags: [Tasks]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskInput'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    get:
      summary: Get all tasks
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [TODO, IN_PROGRESS, DONE]
        - in: query
          name: priority
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH]
        - in: query
          name: assignedTo
          schema:
            type: string
        - in: query
          name: createdBy
          schema:
            type: string
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
        - in: query
          name: tags
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Task ID
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '401':
          description: Unauthorized
    put:
      summary: Update a task
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskInput'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '401':
          description: Unauthorized
    delete:
      summary: Delete a task
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Task ID
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found
        '401':
          description: Unauthorized

components:
  schemas:
    CreateTaskInput:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH]
        dueDate:
          type: string
          format: date-time
        assignedTo:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - title
        - description
        - dueDate
        - assignedTo
    UpdateTaskInput:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH]
        dueDate:
          type: string
          format: date-time
        assignedTo:
          type: string
        tags:
          type: array
          items:
            type: string
    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH]
        dueDate:
          type: string
          format: date-time
        assignedTo:
          type: string
        createdBy:
          type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Pagination:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        pages:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 